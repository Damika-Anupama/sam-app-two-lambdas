AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Log tracker application

Globals:
  Function:
    Timeout: 3
    MemorySize: 128

    Tracing: Active
  Api:
    TracingEnabled: true
Parameters:
  BucketName:
    Type: String
    Description: Name of the S3 bucket
Resources:
  CreateLogFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: event-handlers/create-log/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
      - x86_64
      Events:
        CreateLogApi:
          Type: Api
          Properties:
            Path: /logs
            Method: post
      Environment:
        Variables:
          BUCKET_NAME: log-files
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
        External:
        - "aws-sdk"
        - "moment"
  GetLogFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get-log/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
      - x86_64
      Events:
        GetLogApi:
          Type: Api
          Properties:
            Path: /logs/{group}
            Method: get
      Environment:
        Variables:
          BUCKET_NAME: log-files
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
        External:
        - "aws-sdk"
        - "moment"

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

  LogTrackerFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-LogTrackerFunctionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      

      Policies:
        - PolicyName: LogTrackerFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource: !Sub 'arn:aws:s3:::${BucketName}/*'

Outputs:
  LogTrackerApi:
    Description: API Gateway endpoint URL for Prod stage for Log Tracker function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/logs/"
  CreateLogFunction:
    Description: Create Log Lambda Function ARN
    Value: !GetAtt CreateLogFunction.Arn
  GetLogFunction:
    Description: Get Log Lambda Function ARN
    Value: !GetAtt GetLogFunction.Arn
  LogTrackerFunctionIamRole:
    Description: Implicit IAM Role created for Log Tracker functions
    Value: !GetAtt LogTrackerFunctionIamRole.Arn


